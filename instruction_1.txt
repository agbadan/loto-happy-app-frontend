
Important ne lis pas les fichier .md

# ü§ù Handoff Technique : Int√©gration du Backend Live

**√Ä :** IA D√©veloppeur Frontend
**De :** IA D√©veloppeur Backend
**Date :** 30 Octobre 2025
**Sujet :** Migration de l'application Loto Happy de `localStorage` vers l'API Backend live.

## 1. R√©sum√© Ex√©cutif

Le backend de Loto Happy est d√©sormais **100% fonctionnel et d√©ploy√©** sur une URL publique temporaire via ngrok. Toutes les donn√©es qui √©taient pr√©c√©demment stock√©es dans le `localStorage` de votre navigateur doivent maintenant √™tre r√©cup√©r√©es et envoy√©es via des appels √† cette API REST.

Votre mission est de **refactoriser le code frontend** pour remplacer toutes les interactions avec `localStorage` par des requ√™tes HTTP vers le backend.

**URL de Base de l'API :**
`https://together-fresh-alien.ngrok-free.app`

**Note importante :** Cette URL est temporaire. Vous devez la stocker dans une variable d'environnement pour qu'elle soit facilement modifiable.

## 2. Guide d'Impl√©mentation √âtape par √âtape

### √âtape 1 : Configuration de l'Environnement Frontend

1.  Cr√©ez un fichier `.env` √† la racine de votre projet React.
2.  Ajoutez-y la variable d'environnement pour l'URL de base de l'API :

    ```
    REACT_APP_API_BASE_URL="https://together-fresh-alien.ngrok-free.app"
    ```

3.  Dans votre code (par exemple, dans un fichier de configuration pour Axios ou `fetch`), utilisez cette variable : `const apiBaseUrl = process.env.REACT_APP_API_BASE_URL;`

### √âtape 2 : Refactorisation du Flux d'Authentification

C'est le changement le plus important. La gestion de l'utilisateur et de la session n'est plus dans `localStorage`.

#### A. Connexion (`Login`)

**Avant (localStorage) :**
```javascript
const user = findUserInLocalStorage(email, password);
if (user) {
  localStorage.setItem('lottoHappyUser', JSON.stringify(user));
  // Redirection
}
```

**Apr√®s (API) :**
Remplacez cette logique par un appel `POST` √† l'endpoint `/api/auth/login`.

**Attention :** Cet endpoint attend des donn√©es au format `application/x-www-form-urlencoded`.

```javascript
// Utilisation de 'fetch'
const formData = new URLSearchParams();
formData.append('username', emailOrPhoneNumber); // L'utilisateur peut se connecter avec email ou t√©l√©phone
formData.append('password', password);

try {
  const response = await fetch(`${apiBaseUrl}/api/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: formData,
  });

  if (!response.ok) {
    throw new Error('Identifiants incorrects');
  }

  const data = await response.json(); // { access_token: "...", token_type: "bearer" }
  
  // ACTION CRUCIALE : Stockez le 'access_token'
  // Stockez ce token dans un √©tat global (Contexte, Redux) ou une cookie s√©curis√©e.
  // NE stockez PAS les informations de l'utilisateur directement.
  saveTokenToSecureStorage(data.access_token);
  
  // Ensuite, r√©cup√©rez les infos de l'utilisateur avec le token
  await fetchCurrentUser(data.access_token);

} catch (error) {
  // G√©rer l'erreur de connexion
}
```

#### B. Utilisation du Token JWT

Toutes les requ√™tes vers des endpoints prot√©g√©s (identifi√©s par un cadenas üîí dans la documentation) DOIVENT inclure le token dans les en-t√™tes.

**Exemple avec Axios (recommand√©) :**
Cr√©ez une instance Axios qui ajoute automatiquement le header.

```javascript
import axios from 'axios';

const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL,
});

// Intercepteur pour ajouter le token √† chaque requ√™te
apiClient.interceptors.request.use(config => {
  const token = getTokenFromSecureStorage(); // Votre fonction pour r√©cup√©rer le token
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default apiClient;
```

#### C. R√©cup√©rer l'Utilisateur Connect√©

**Avant (localStorage) :**
```javascript
const user = JSON.parse(localStorage.getItem('lottoHappyUser'));
```

**Apr√®s (API) :**
Apr√®s la connexion, et √† chaque rechargement de la page, faites un appel √† `GET /api/auth/me` pour r√©cup√©rer les informations √† jour de l'utilisateur.

```javascript
// en utilisant l'instance Axios configur√©e
try {
  const response = await apiClient.get('/api/auth/me');
  const user = response.data; // { id, username, email, balanceGame, ... }
  
  // Stockez cet objet utilisateur dans votre √©tat global (Contexte, Redux)
  setCurrentUser(user);
  
} catch (error) {
  // L'utilisateur n'est pas (ou plus) authentifi√©. Le d√©connecter.
  logout();
}
```

### √âtape 3 : Remplacement des Appels `localStorage` par des Appels API

Pour chaque fonctionnalit√©, remplacez la lecture/√©criture de `localStorage` par l'appel √† l'endpoint correspondant.

-   **Afficher les tirages √† venir :**
    -   **Avant :** `localStorage.getItem('loto_happy_draws')`
    -   **Apr√®s :** `GET /api/draws/upcoming`

-   **Acheter un ticket :**
    -   **Avant :** `localStorage.setItem('loto_happy_tickets', ...)`
    -   **Apr√®s :** `POST /api/tickets` avec les donn√©es du pari.

-   **Voir l'historique des paris :**
    -   **Avant :** `localStorage.getItem('loto_happy_tickets')`
    -   **Apr√®s :** `GET /api/tickets/me` (qui retourne une liste d√©j√† enrichie et pagin√©e).

-   **Voir l'historique des transactions :**
    -   **Avant :** `user.playerTransactionHistory` depuis `localStorage`.
    -   **Apr√®s :** `GET /api/players/me/transactions`.

-   **Demander un retrait :**
    -   **Avant :** `localStorage.setItem('loto_happy_withdrawal_requests', ...)`
    -   **Apr√®s :** `POST /api/withdrawals`.

### √âtape 4 : Gestion des √âtats (Chargement, Erreur)

Puisque les appels sont maintenant asynchrones, chaque composant qui r√©cup√®re des donn√©es doit g√©rer un √©tat de chargement (`loading`) et un √©tat d'erreur (`error`).

**Exemple pour un composant affichant les tirages :**
```javascript
const [draws, setDraws] = useState([]);
const [loading, setLoading] = useState(true);
const [error, setError] = useState(null);

useEffect(() => {
  const fetchDraws = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get('/api/draws/upcoming');
      setDraws(response.data);
      setError(null);
    } catch (err) {
      setError("Impossible de charger les tirages.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  fetchDraws();
}, []);

if (loading) return <Spinner />;
if (error) return <ErrorMessage message={error} />;
return <DrawsList draws={draws} />;
```

### √âtape 5 : Gestion des Erreurs API

Le backend renvoie des erreurs structur√©es. Utilisez-les pour afficher des messages clairs √† l'utilisateur.

```javascript
// Exemple lors d'un achat de ticket
try {
  await apiClient.post('/api/tickets', betData);
  // Succ√®s
} catch (error) {
  if (error.response && error.response.data.detail) {
    // R√©cup√©rer notre format d'erreur standardis√©
    const apiError = error.response.data.detail.error;
    // apiError = { code: "INSUFFICIENT_BALANCE", message: "..." }
    displayToast(apiError.message); // Afficher le message √† l'utilisateur
  } else {
    displayToast("Une erreur inattendue est survenue.");
  }
}
```

## 3. Checklist Finale d'Int√©gration

-   [ ] La variable `REACT_APP_API_BASE_URL` est configur√©e et utilis√©e.
-   [ ] Le flux de connexion appelle `POST /api/auth/login`, stocke le token, et appelle `GET /api/auth/me`.
-   [ ] Le flux d'inscription appelle `POST /api/auth/register`.
-   [ ] Toutes les requ√™tes prot√©g√©es envoient le header `Authorization: Bearer {token}`.
-   [ ] Tous les appels `localStorage.getItem(...)` sont remplac√©s par des requ√™tes `GET`.
-   [ ] Tous les appels `localStorage.setItem(...)` sont remplac√©s par des requ√™tes `POST`, `PUT`, ou `DELETE`.
-   [ ] Les composants g√®rent les √©tats `loading` et `error` pendant les appels API.
-   [ ] Les messages d'erreur retourn√©s par l'API sont affich√©s √† l'utilisateur.

Pour toute question sur le format des donn√©es ou les endpoints, veuillez-vous r√©f√©rer aux documents `BACKEND_SPECIFICATIONS.md` et `API_EXAMPLES.md` qui vous ont √©t√© fournis initialement.

Bon d√©veloppement !

**(Fin du document)**